Map集合称为双列集合，一次需要存一对数据作为一个元素
Map集合的每个元素称为键值对集合
Map集合的所有键是不允许重复的，但是值可以重复，键和值是一一对应的，一个键只能找到自己对应的值

主要用于一一对应的场景居多

HashMap(由键决定特点)：无序、不重复、无索引
LinkedHashMap(由键决定特点)：有序、不重复、无索引
TreeMap(由键决定特点)：按照大小默认升序排序、不重复、无索引

### Map
1. **键值对**：`Map`存储键值对（key-value pairs），每个键最多只能映射到一个值。
2. **键的唯一性**：`Map`中的键是唯一的，但值可以有多个相同的。
3. **无序**：`Map`中的元素也是无序的，尽管某些实现（如`TreeMap`）可以保持元素的排序。
4. **实现类**：常见的实现类有`HashMap`、`LinkedHashMap`、`TreeMap`和`Hashtable`。
5. **性能**：`HashMap`提供最快的查找和插入操作，`LinkedHashMap`保持插入顺序，而`TreeMap`可以保持键的排序。


HashMap：基于哈希表实现，为键计算哈希码以存储键值对，提供最快的查找速度。
TreeMap：基于红黑树数据结构实现，可以保持键的自然排序或根据提供的 Comparator 进行排序。
LinkedHashMap：维护了键值对的插入顺序，或者访问顺序（如果设置了相应的选项）。
Hashtable：和 HashMap 类似，但它是线程安全的，并且不允许 null 键和值。

尽管 Map 接口不是 Collection 接口的直接子接口，但 Map 提供了一些方法来获取可以被视为 Collection 的视图：

keySet(): 返回一个 Set 集合，包含了 Map 中所有的键。
values(): 返回一个 Collection 集合，包含了 Map 中所有的值。
entrySet(): 返回一个 Set 集合，包含了 Map 中所有的键值对（以 Map.Entry 对象的形式）。
因此，尽管 Map 本身不是 Collection 的一部分，但它提供了转换为 Collection 视图的方法，允许用户以集合的形式操作 Map 的键、值或键值对。



